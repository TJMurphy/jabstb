[
["software.html", "Chapter 3 Installing and Understanding the Software 3.1 Use these versions for Fall 2019 term 3.2 Installing R and RStudio (and the tidyverse package) 3.3 What is R? 3.4 My code is your code 3.5 Getting started with R 3.6 Other resources", " Chapter 3 Installing and Understanding the Software library(swirl) library(tidyverse) This course requires that you use the latest version of R, while using RStudio, an integrated development environment to run R. R and RStudio need to be downloaded and installed separately. PLEASE READ THE INSTALLATION INSTRUCTIONS BELOW. 3.1 Use these versions for Fall 2019 term R: 3.6.1 “Action of the Toes” RStudio: 1.2.1335 R is the computational engine. RStudio is a modern integrated development environment. RStudio is an environment for your machine for creating documents (primarily R script and R markdown files) that have R code, which you can run within RStudio. 3.2 Installing R and RStudio (and the tidyverse package) Installation of R and RStudio is pretty straight forward but not idiot proof. 3.2.1 Rule 1: Install R first, RStudio second This will make it easier for RStudio to “find” your R installation. 3.2.2 Rule 2: Don’t pay! One sign you are doing it wrong is when you find yourself about to purchase something. Step away if that’s the case. These are free. 3.2.3 Rule 3: Don’t compile! A second sign you are doing it wrong is if you are compiling source code. Unless you really really know what you are doing, don’t compile ‘source’. Use the installers, which are ‘binaries’. 3.2.4 Rule 4: Install the right software for your machine Note for Windows users: If you have a 64bit processor, it is a very good idea to install and run the 64bit R version. 3.2.5 Rule 5: Use this installation guide Now go to this link, find your machine system, and follow the directions therein. After installing R and then RStudio, when you launch RStudio on your machine you should see the R console in one of the RStudio panes. After the prompt (&gt;), type either 2+2, 2^2, 16/4 or 2*2 in the console. If you get 4 with any of these you are good to go (you’ll come to discover there are many ways to get the same thing accomplished using R, so why not start with an example!) 3.3 What is R? It seems the hard part of getting going with any new programming language is figuring out from the jargon how all the parts work together. So here’s an extremely helpful analogy, PBS personality Bob Ross is driven to create oil landscapes in much the same way you are driven to analyze data. Bob Ross paints on different types of canvas. You’ll write and save and share R code in different file formats (R Script, R Markdown, others). Bob Ross has a palette and an easel on which to do this. You have R and RStudio. Bob Ross has many types of paint brushes. You have R packages. Bob Ross has different types of paints and colors for creating specific landscape features. You have the R functions, which come within R packages. knitr::include_graphics(&quot;images/bobross11-1395763361.jpg&quot;) 3.3.1 R R is an open source computing environment and language. R is designed for use on a wide assortment of data analysis projects. 3.3.2 R packages Solving a given problem with R will frequently involve using one or more source packages. A package is a collection of pre-built functions that you can apply to your own data. Packages have help pages and/or vignettes that illustrate how to use the functions. Packages often have example data sets that are quite useful to experiment with the functions. Packages are created by R users who share them with other users in repositories (CRAN, Github, etc). After installing R and then R Studio, on the top menu go to View &gt; Show Packages (or use Ctrl+7 on your keyboard). In a pane you’ll see the R packages that are already on your machine. There are two main package libraries: the system library and the user library. The packages in the system library come along with an R installation. The user library are the packages you install on your machine. The user library will grow over time. As you do more things, you’ll find uses for more and more different packages. You may even create one of your own. A custom package you write can be useful to house functions and tasks that you write for your own work. 3.3.3 Installing R packages Whenever you need to install a package, say, the foobar package, in the console you type the command install.packages(\"foobar\") after the prompt. Whenever you need to use functions within an installed user library package, you must load it into your working environment during your current R session using the library function. For example, typing library(foobar) in the console will load the foobar package in your environment. Packages in the system library don’t need to be called into the environment. Their functions work automagically. At the beginning of each chapter I list the packages that will be necessary to run the scripts in that chapter. In order to run my scripts, you will first need to install those packages on your machine. 3.3.3.1 Avoid compiling When installing packages you are sometimes presented with the option of compiling the package from source code. In almost all cases, you don’t want to do that. In almost all cases, install the binary version, which is pre-compiled. You install a package once. After that, whenever you need to use the package (or a function(s) within it), you must load it into your environment using the library() command, for the current session. 3.4 My code is your code When taking my course, I want you to read everything in these chapters, including the R code. Especially the R code. If you’re able to see the code that leads to some output, that means I think it is important for you to understand that code, how it works. You’ll need it as a basis to write your own custom scripts…for class work, for home work, and hopefully beyond. If you are new to R, at first the code will seem…unintelligible. But it will make sense to you if take the time to read it. The other stuff I’ve written in the chapters is about statistics. In my course, understanding the R code is no less important than understanding the statistics. 3.5 Getting started with R Poke around with the RStudio menu bar and the RStudio panes. Under Tools select Global Options and experiment with an appearance configuration to your liking. Once you have R and RStudio up and running a class assignment will be to work on the R Programming module in the interactive swirl package. Install and load the swirl library by typing the following into the R console within R studio. install.packages(&quot;swirl&quot;) library(swirl) Swirl does a quick overview of the basics. But there are a lot of basics, most of which you’ll forget! But that’s OK. As you go through swirl I suggest you go to the source pane to open up a fresh R script file or R markdown file to take notes (eg, copy/paste code snippets) for a custom cheat sheet. The first few weeks you’ll come pack to your cheat sheet. 3.6 Other resources How to do something? Just Google it. Chances are someone had the exact same question you have and someone else wrote a decent answer. By far, I find Stack Overflow to be the most useful resource. I usually only click on Stack Overflow links that come up in Google searches. You’ll probably never have to ask a question on SO. There’s a good chance someone else asked it, and it has been answered already. It took some time for me to learn how to read R’s Help documents and vignettes. Most of the time, I figure out how a new function works by playing with the examples in these files; by reverse engineering them. But there are many, many other resources with which to get started. Try some, if you wish. If you are ready to roll up your sleaves and play with R go here. As you work with R you’ll make mistakes. Of these, &gt;90% will be typos, especially missing commas and unclosed parentheses. If you didn’t mistype a command, copy and paste error messages into your browser search bar. Most of the errors you will make have happened before. Most of what you want to do someone has done before. Code camps are nice, but by far the best way to learn R is to just start using it to solve the problems you need to solve. I’ll provide you the problems you need to solve in this course. They are about learning statistics, but you’ll end up learning how to use R as a side benefit. By the way, after you install the swirl package, go ahead and install the tidyverse package. It’s actually a collection of many packages that we’ll use a lot. Make sure you have ‘tidyverse’ up and running by the first day of class. "]
]
