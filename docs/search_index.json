[
["jaxwest2.html", "Chapter 26 Reproducible Data Munging Mostly with Tidyverse 26.1 Look at the original data carefully 26.2 Our goal 26.3 Read the data into R 26.4 Select the variables 26.5 Trim the cases 26.6 Go long 26.7 Pull out the values for the day variable 26.8 Convert day to numeric 26.9 Convert tumor_vol to numeric 26.10 Deal with that NA 26.11 Convert variables to factor 26.12 Plot the data", " Chapter 26 Reproducible Data Munging Mostly with Tidyverse library(tidyverse) library(readxl) library(viridis) library(RColorBrewer) Reproducibility is when someone who has your data can conduct the same analysis, arriving at the same parameter estimates and conclusions. The data processing steps of an analysis are perhaps the most critical determinant of reproducibility. Ideally, this is performed using a breadcrumbs process, where each step is traceable. That’s what R scripts do and why they are better than munging data in GUI software, such as excel or other stats packages. Here’s an example of what I mean by an R script munge. I thought it would be interesting to try and pull this off using mostly tidyverse functions, if possible. The Jaxwest2 data represent an experiment to establish tumor xenograft growth in \\(NOD.CB17-Prkdc^{scid}/J\\), an immunodeficient mouse strain. Jaxwest2 is a nice data set to illustrate a one-way related measures ANOVA. They also provides an opportunity to illustrate some data wrangling technique. The latter is the focus here. In particular, I’ll illustrate how a complete reproducible data munge can be accomplished using mostly just the tidyverse. The study design involved injecting HT29 human colon cancer cells into the mice. Over the next few weeks repeated daily measurements were collected from each mouse on a handful of outcome variables, including body weight and tumor lengths, widths, and heights. Tumor volume was calculated from length and width data. The multiple measures taken from individual subjects are instrinsically-linked. The day of measurement is the only factor, and it has multiple levels. This all fits a one-way repeated measures ANOVA experimental design model. In the study per se, three groups are compared: 1) Control (no vehicle), 2) Control (vehicle), and 3) Test Group (pretreatment). The latter is apparently proprietary, providing very little outcome data. The first two are similar and can be expected to generate the same outcomes. I’m not interested in comparing these groups since the comparisons aren’t particularly interesting scientifically. So we’ll take only the first of these groups to conduct an ANOVA analysis (later) and imagine the other two didn’t exist. Had we compared these groups, too, it would be a two-way ANOVA repeated measures design. Therefore, we can use this to study the effect of time on tumor cell growth. We can answer the following question: Will tumor cells grow if injected into the animals? We’ll focus only on a subset of the data, the tumor volume measurements over time in the first group. This chapter illustrates how to wrangle that subset out from the rest of the data in the excel file. 26.1 Look at the original data carefully The data are in a file called Jaxwest2.xls, which can be downloaded from the Jackson Labs here. Before starting the munge take a close look at the excel file. A few things to note. First, there are two worksheets. One has the experimental data. The second is a variable key. Now look at that first worksheet. There are two header rows, which is problematic. The first header row is incomplete since it has no values over the first 7 columns. The label in the 8th column actually refers to header values in the remainder of the columns, not the data beneath it. Those values correspond to the day data were collected in a time series. The second header row nicely defines the variables for each column. Note how beginning with the 9th column, the variable name incorporates the day number. Thus, bw_1 is the variable body weight on the first day post injection. Thus, the information about the time series is embedded within each variable name. In other words, most of the variable names are hybrids, carrying information about both the measurement and the day. We’ll need to deconvolute those names. The good news is that the first header row doesn’t provide any information we can’t get from the second header row, so when we read in the data we’ll simply omit that first header row. It would only complicate the munge. Finally, below the header, every row is a case that corresponds to a unique mouse. The values for the variable mouse_ID illustrates as much. Here’s the big picture, however. The column and row structure indicate that repeated measures of multiple outcome variables were collected for each of these mice. 26.2 Our goal Stop me if I’ve used this metaphor previously. But starting a munge is a lot like starting an organic chemistry synthesis. You have the reagents. You know the final product. The only question is how will you create the latter given the former. Let’s collect the time series only for the tumor_vol variable. We’ll ignore all the other outcome variables. The output–the goal–is to create a plot of the data. Eventually, we’ll run a one-way related measures ANOVA analysis to test whether time has an effect on tumor growth (it does, by the bloody obvious test). To get there we’ll read in all but the top row of the first sheet of the excel file, then simplify by selecting only the variables that we want from the Jaxwest2 data. We want a long format data frame where every column represents a unique variable. It will have a 1) numeric tumor volume variable, and a 2) day of measurement variable as a factor, and a 3) variable for the mouse ID also as a factor, and will have data corresponding to only one treatment group (Control (no vehicle)). 26.3 Read the data into R We’ll read in all but the first header row. The function read_excel is from the readxl package, which is part of the tidyverse but you may need to install it separately. The script below creates the object jw2, which is a data frame of 103 variables! Except for the first header row, jw2 contains all of the data in the first sheet of the source file. Note how jaxwest2.xls is otherwise untouched. No changes have been made locally to the original source file. That’s important because it is good reproducible practice. jw2 &lt;-&quot;datasets/jaxwest2.xls&quot; %&gt;% read_excel( skip=1, sheet=1 ) jw2 ## # A tibble: 35 x 103 ## strain sex mouse_ID birth arrival cage_code ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dttm&gt; &lt;chr&gt; ## 1 NOD.C~ f 38 2007-04-04 00:00:00 2007-06-04 00:00:00 IMMS1-19 ## 2 NOD.C~ f 39 2007-04-04 00:00:00 2007-06-04 00:00:00 IMMS1-19 ## 3 NOD.C~ f 43 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-20 ## 4 NOD.C~ f 48 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-21 ## 5 NOD.C~ f 51 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-22 ## 6 NOD.C~ f 58 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-24 ## 7 NOD.C~ f 62 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-25 ## 8 NOD.C~ f 63 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-25 ## 9 NOD.C~ f 64 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-25 ## 10 NOD.C~ f 66 2007-04-24 00:00:00 2007-06-04 00:00:00 IMMS1-26 ## # ... with 25 more rows, and 97 more variables: HT29_inj &lt;chr&gt;, ## # test_group &lt;chr&gt;, bw_1 &lt;dbl&gt;, bw_12 &lt;dbl&gt;, bw_15 &lt;dbl&gt;, bw_17 &lt;dbl&gt;, ## # bw_19 &lt;dbl&gt;, bw_22 &lt;chr&gt;, bw_24 &lt;chr&gt;, bw_26 &lt;chr&gt;, bw_29 &lt;chr&gt;, ## # bw_31 &lt;chr&gt;, bw_33 &lt;chr&gt;, bw_36 &lt;chr&gt;, bw_38 &lt;chr&gt;, bw_40 &lt;chr&gt;, ## # bw_43 &lt;chr&gt;, bw_44 &lt;chr&gt;, bw_chg_12 &lt;dbl&gt;, bw_chg_15 &lt;dbl&gt;, ## # bw_chg_17 &lt;dbl&gt;, bw_chg_19 &lt;dbl&gt;, bw_chg_22 &lt;chr&gt;, bw_chg_24 &lt;chr&gt;, ## # bw_chg_26 &lt;chr&gt;, bw_chg_29 &lt;chr&gt;, bw_chg_31 &lt;chr&gt;, bw_chg_33 &lt;chr&gt;, ## # bw_chg_36 &lt;chr&gt;, bw_chg_38 &lt;chr&gt;, bw_chg_40 &lt;chr&gt;, bw_chg_43 &lt;chr&gt;, ## # bw_chg_44 &lt;chr&gt;, tumor_L_17 &lt;chr&gt;, tumor_W_17 &lt;chr&gt;, tumor_H_17 &lt;chr&gt;, ## # tumor_vol_17 &lt;chr&gt;, tumor_L_18 &lt;chr&gt;, tumor_W_18 &lt;chr&gt;, ## # tumor_H_18 &lt;chr&gt;, tumor_vol_18 &lt;chr&gt;, tumor_L_19 &lt;dbl&gt;, ## # tumor_W_19 &lt;dbl&gt;, tumor_H_19 &lt;dbl&gt;, tumor_vol_19 &lt;dbl&gt;, ## # tumor_L_22 &lt;chr&gt;, `tumor_W_ 22` &lt;chr&gt;, `tumor_H_ 22` &lt;chr&gt;, ## # `tumor_vol_ 22` &lt;chr&gt;, tumor_L_24 &lt;chr&gt;, tumor_W_24 &lt;chr&gt;, ## # tumor_H_24 &lt;chr&gt;, tumor_vol_24 &lt;chr&gt;, tumor_L_26 &lt;chr&gt;, ## # tumor_W_26 &lt;chr&gt;, tumor_H_26 &lt;chr&gt;, tumor_vol_26 &lt;chr&gt;, ## # tumor_L_29 &lt;chr&gt;, tumor_W_29 &lt;chr&gt;, tumor_H_29 &lt;chr&gt;, ## # tumor_vol_29 &lt;chr&gt;, tumor_L_31 &lt;chr&gt;, tumor_W_31 &lt;chr&gt;, ## # tumor_H_31 &lt;chr&gt;, tumor_vol_31 &lt;chr&gt;, tumor_L_33 &lt;chr&gt;, ## # tumor_W_33 &lt;chr&gt;, tumor_H_33 &lt;chr&gt;, tumor_vol_33 &lt;chr&gt;, ## # tumor_L_36 &lt;chr&gt;, tumor_W_36 &lt;chr&gt;, tumor_H_36 &lt;chr&gt;, ## # tumor_vol_36 &lt;chr&gt;, tumor_L_38 &lt;chr&gt;, tumor_W_38 &lt;chr&gt;, ## # tumor_H_38 &lt;chr&gt;, tumor_vol_38 &lt;chr&gt;, tumor_L_40 &lt;chr&gt;, ## # tumor_W_40 &lt;chr&gt;, tumor_H_40 &lt;chr&gt;, tumor_vol_40 &lt;chr&gt;, ## # tumor_L_44 &lt;chr&gt;, tumor_W_44 &lt;chr&gt;, tumor_H_44 &lt;chr&gt;, ## # tumor_vol_44 &lt;chr&gt;, tumor_chg_22 &lt;chr&gt;, tumor_chg_24 &lt;chr&gt;, ## # tumor_chg_26 &lt;chr&gt;, tumor_chg_29 &lt;chr&gt;, tumor_chg_31 &lt;chr&gt;, ## # tumor_chg_33 &lt;chr&gt;, tumor_chg_38 &lt;chr&gt;, tumor_chg_40 &lt;chr&gt;, ## # tumor_chg_44 &lt;chr&gt;, tumor_wt_44 &lt;chr&gt;, survival_500 &lt;chr&gt;, ## # survival_1500 &lt;chr&gt; From here forward I’m illustrating the munge in step-by-step chunks, which otherwise could be combined with the one above into a single longer script. I’m also only using, or mostly using, the tidyverse for this project. 26.4 Select the variables We slim the data set considerably using the select function. We want only the mouse_ID, the test group, and all the columns that correspond to a tumor volume measurement on a given day. We get the latter using the contains function. We want the mouse_ID because the data are repeated measures. We’ll need it as a grouping factor for both ggplot and ANOVA. The test group variable will initially serve as a check to know we grabbed the right data. We can omit it later. contains is really helpful because the tumor volume variables for each day of measurement have a slightly different name, yet each contain the characters tumor_vol_ as a common stem. We’ll create a new object, jw2vol to represent the data. Notice how in subsequent chunks jw2vol is modified as we successively munge the data into shape. jw2vol &lt;- jw2 %&gt;% select( mouse_ID, test_group, contains(&quot;tumor_vol_&quot;) ) jw2vol ## # A tibble: 35 x 15 ## mouse_ID test_group tumor_vol_17 tumor_vol_18 tumor_vol_19 ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 38 Control (~ 27.19000000~ 54.75 77.6 ## 2 39 Control (~ 12.65 15.85 24.8 ## 3 43 Control (~ NA 30.03999999~ 54.9 ## 4 48 Control (~ 7.879999999~ 30.17000000~ 31.0 ## 5 51 Control (~ 16.14999999~ 25.82999999~ 28.6 ## 6 58 Control (~ 61.46000000~ 105.3 93.2 ## 7 62 Control (~ 20.07 44.07 60.1 ## 8 63 Control (~ 56.10999999~ 93.06999999~ 104. ## 9 64 Control (~ 17.12000000~ 78.14000000~ 79.8 ## 10 66 Control (~ 15.08 32.25999999~ 35.4 ## # ... with 25 more rows, and 10 more variables: `tumor_vol_ 22` &lt;chr&gt;, ## # tumor_vol_24 &lt;chr&gt;, tumor_vol_26 &lt;chr&gt;, tumor_vol_29 &lt;chr&gt;, ## # tumor_vol_31 &lt;chr&gt;, tumor_vol_33 &lt;chr&gt;, tumor_vol_36 &lt;chr&gt;, ## # tumor_vol_38 &lt;chr&gt;, tumor_vol_40 &lt;chr&gt;, tumor_vol_44 &lt;chr&gt; 26.5 Trim the cases We only want a subset of the test_groups. Looking at jw2vol we can see those happen to be the first 11 cases in the data set. We’ll slice them out, throwing away the rest. jw2vol &lt;- jw2vol %&gt;% filter( test_group == &quot;Control (no vehicle)&quot; ) jw2vol ## # A tibble: 11 x 15 ## mouse_ID test_group tumor_vol_17 tumor_vol_18 tumor_vol_19 ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 38 Control (~ 27.19000000~ 54.75 77.6 ## 2 39 Control (~ 12.65 15.85 24.8 ## 3 43 Control (~ NA 30.03999999~ 54.9 ## 4 48 Control (~ 7.879999999~ 30.17000000~ 31.0 ## 5 51 Control (~ 16.14999999~ 25.82999999~ 28.6 ## 6 58 Control (~ 61.46000000~ 105.3 93.2 ## 7 62 Control (~ 20.07 44.07 60.1 ## 8 63 Control (~ 56.10999999~ 93.06999999~ 104. ## 9 64 Control (~ 17.12000000~ 78.14000000~ 79.8 ## 10 66 Control (~ 15.08 32.25999999~ 35.4 ## 11 67 Control (~ 21.68 26.96000000~ 44.6 ## # ... with 10 more variables: `tumor_vol_ 22` &lt;chr&gt;, tumor_vol_24 &lt;chr&gt;, ## # tumor_vol_26 &lt;chr&gt;, tumor_vol_29 &lt;chr&gt;, tumor_vol_31 &lt;chr&gt;, ## # tumor_vol_33 &lt;chr&gt;, tumor_vol_36 &lt;chr&gt;, tumor_vol_38 &lt;chr&gt;, ## # tumor_vol_40 &lt;chr&gt;, tumor_vol_44 &lt;chr&gt; 26.6 Go long The iteration above is 15 columns wide. We use the gather function to make it long, and only 4 columns wide. Importantly, the new variable measurement is intended to be an intermediate. It has the information about day of measurement within the character string, which we’ll pull out in a moment. First, make it long: jw2vol &lt;- jw2vol %&gt;% gather( measurement, tumor_vol, -mouse_ID, -test_group ) jw2vol ## # A tibble: 143 x 4 ## mouse_ID test_group measurement tumor_vol ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 38 Control (no vehicle) tumor_vol_17 27.190000000000001 ## 2 39 Control (no vehicle) tumor_vol_17 12.65 ## 3 43 Control (no vehicle) tumor_vol_17 NA ## 4 48 Control (no vehicle) tumor_vol_17 7.8799999999999999 ## 5 51 Control (no vehicle) tumor_vol_17 16.149999999999999 ## 6 58 Control (no vehicle) tumor_vol_17 61.460000000000001 ## 7 62 Control (no vehicle) tumor_vol_17 20.07 ## 8 63 Control (no vehicle) tumor_vol_17 56.109999999999999 ## 9 64 Control (no vehicle) tumor_vol_17 17.120000000000001 ## 10 66 Control (no vehicle) tumor_vol_17 15.08 ## # ... with 133 more rows 26.7 Pull out the values for the day variable In the preceding step, all of the values for the measurement variable begin with the same character string. Getting rid of that will leave us with the day number. str_remove_all is from the stringr package and transmute is a dplyr function. All are from the tidyverse. We want the resulting object to be a data frame with three variables. One each for the day, mouse_ID, and tumor volume. Having confirmed the cases are from the group we want, we no longer need a test_group variable. jw2vol &lt;- jw2vol %&gt;% transmute( day=str_remove_all(measurement, &quot;tumor_vol_&quot;), mouse_ID, tumor_vol ) jw2vol ## # A tibble: 143 x 3 ## day mouse_ID tumor_vol ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 17 38 27.190000000000001 ## 2 17 39 12.65 ## 3 17 43 NA ## 4 17 48 7.8799999999999999 ## 5 17 51 16.149999999999999 ## 6 17 58 61.460000000000001 ## 7 17 62 20.07 ## 8 17 63 56.109999999999999 ## 9 17 64 17.120000000000001 ## 10 17 66 15.08 ## # ... with 133 more rows 26.8 Convert day to numeric Because they are characters the values for days may be out of sequence (they were on my machine). Converting them to numeric should retain the correct order. Later, we’ll convert the day variable to a factor for plotting and ANOVA purposes. jw2vol &lt;- jw2vol %&gt;% transmute( day=(as.numeric(day)), mouse_ID, tumor_vol ) jw2vol ## # A tibble: 143 x 3 ## day mouse_ID tumor_vol ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 17 38 27.190000000000001 ## 2 17 39 12.65 ## 3 17 43 NA ## 4 17 48 7.8799999999999999 ## 5 17 51 16.149999999999999 ## 6 17 58 61.460000000000001 ## 7 17 62 20.07 ## 8 17 63 56.109999999999999 ## 9 17 64 17.120000000000001 ## 10 17 66 15.08 ## # ... with 133 more rows 26.9 Convert tumor_vol to numeric You may have noticed above that R read the tumor_vol values as character. Here we convert them to numeric, and then round their values to 1 significant digit. jw2vol &lt;- jw2vol %&gt;% transmute( tumor_vol=round(as.numeric(tumor_vol), 1 ), mouse_ID, day ) ## Warning in evalq(round(as.numeric(tumor_vol), 1), &lt;environment&gt;): NAs ## introduced by coercion jw2vol ## # A tibble: 143 x 3 ## tumor_vol mouse_ID day ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 27.2 38 17 ## 2 12.7 39 17 ## 3 NA 43 17 ## 4 7.9 48 17 ## 5 16.1 51 17 ## 6 61.5 58 17 ## 7 20.1 62 17 ## 8 56.1 63 17 ## 9 17.1 64 17 ## 10 15.1 66 17 ## # ... with 133 more rows 26.10 Deal with that NA You notice a missing tumor_vol value for a mouse_ID 43 on day 17. There are two options when confronted with NA values. De-list or impute. Since this is a repeated measures design, delisting this one of a string of repeated values would mean losing all of the data on the mouse. Ugh. Since we have 10 other values for day 17, it makes sense to impute a value for 43, on their bias. We’ll take the means of all cases on day 17 and replace the NA with that value. First, check the means. Second, replace. means &lt;- group_by( jw2vol, day ) %&gt;% summarise( mean=mean(tumor_vol, na.rm=T) ) means ## # A tibble: 13 x 2 ## day mean ## &lt;dbl&gt; &lt;dbl&gt; ## 1 17 25.6 ## 2 18 48.8 ## 3 19 57.6 ## 4 22 84.5 ## 5 24 113. ## 6 26 179. ## 7 29 202. ## 8 31 318. ## 9 33 469. ## 10 36 601. ## 11 38 854. ## 12 40 1122. ## 13 44 1422. jw2vol &lt;-jw2vol %&gt;% replace_na( list(tumor_vol=means$mean[1] ) ) jw2vol ## # A tibble: 143 x 3 ## tumor_vol mouse_ID day ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 27.2 38 17 ## 2 12.7 39 17 ## 3 25.6 43 17 ## 4 7.9 48 17 ## 5 16.1 51 17 ## 6 61.5 58 17 ## 7 20.1 62 17 ## 8 56.1 63 17 ## 9 17.1 64 17 ## 10 15.1 66 17 ## # ... with 133 more rows 26.11 Convert variables to factor ANOVA are called factorial analyses. That’s because the predictor variable is a factor. We need to convert the day variable into a factor. While we’re at it, we’ll convert the mouse_ID into a factor, too, so that it plays nice with ggplot and ANOVA. jw2vol &lt;- jw2vol %&gt;% mutate( mouse_ID=as.factor(mouse_ID), day=as.factor(day) ) jw2vol ## # A tibble: 143 x 3 ## tumor_vol mouse_ID day ## &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; ## 1 27.2 38 17 ## 2 12.7 39 17 ## 3 25.6 43 17 ## 4 7.9 48 17 ## 5 16.1 51 17 ## 6 61.5 58 17 ## 7 20.1 62 17 ## 8 56.1 63 17 ## 9 17.1 64 17 ## 10 15.1 66 17 ## # ... with 133 more rows 26.12 Plot the data Repeated measures on subjects is the primary feature of this data set. Within each mouse_ID, every measurement is intrinsically-related to every other measurement. Point-to-point graphing illustrates this. Here’s all the data! It’s beautiful. ggplot(jw2vol, aes( day, tumor_vol, group=mouse_ID, color=mouse_ID))+ geom_point()+ geom_line()+ #scale_color_brewer(palette=&quot;Paired&quot;)+ scale_color_viridis(discrete=T)+ theme_classic() "]
]
